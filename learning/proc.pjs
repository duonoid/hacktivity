// All Examples Written by Casey Reas and Ben Fry
// unless otherwise stated.
int numBalls = 1;
float spring = 0.05;
float gravity = 0.08;
Ball[] balls = new Ball[numBalls];

void setup() 
{
  size(800, 600);
  noStroke();
  smooth();
  for (int i = 0; i < numBalls; i++) {
    balls[i] = new Ball(400, 300, 40, i, balls);
  }
}

void draw() 
{
  background(0);
  for (int i = 0; i < balls.length; i++) {
    balls[i].collide();
    balls[i].moveUp();
    balls[i].display(); 
	 balls[i].activate();
  }
}    

Ball getBall(int i){
	return balls[i];
}  

void moveAllBalls()
{   
	for (int i = 0; i < numBalls; i++) {
    	balls[i].activate();  
  }   
}

void addBall(){
  	 balls[balls.length] = new Ball(random(0,800), random(0,600), 40, balls.length , balls);  
	 numBalls += 1;
}       

class Ball {
  float x, y;
  float diameter;
  float vx = 0;
  float vy = 0;
  int id;
  int active = 0;
  Ball[] others;
 
  Ball(float xin, float yin, float din, int idin, Ball[] oin) {
    x = xin;
    y = yin;
    diameter = din;
    id = idin;     	//this ball id
    others = oin;    //other balls in the environment
  } 
  
  void activate(){
  	active = 1;
  }  


  void collide() {
    for (int i = id + 1; i < numBalls; i++) {
      float dx = others[i].x - x;
      float dy = others[i].y - y;
      float distance = sqrt(dx*dx + dy*dy);
      float minDist = others[i].diameter/2 + diameter/2;
      if (distance < minDist) { 
        float angle = atan2(dy, dx);
        float targetX = x + cos(angle) * minDist;
        float targetY = y + sin(angle) * minDist;
        float ax = (targetX - others[i].x) * spring;
        float ay = (targetY - others[i].y) * spring;
        vx -= ax;
        vy -= ay;
        others[i].vx += ax;
        others[i].vy += ay;
      }
    }   
  }
  
  void moveUp() {
	 if (active == 1) {
	    vy += gravity;
	    x += vx;
	    y += vy;
	    if (x + diameter/2 > width) {
	      x = width - diameter/2;
	      vx += -0.9; 
	    }
	    else if (x - diameter/2 < 0) {
	      x = diameter/2;
	      vx *= -0.9;
	    }
	    if (y + diameter/2 > height) {
	      y = height - diameter/2;
	      vy *= -0.9; 
	    } 
	    else if (y - diameter/2 < 0) {
	      y = diameter/2;
	      vy *= -0.9;
	    }
	 }
  } 

	void moveDown() {
	 if (active == 1) {
	    vy += gravity;
	    x += vx;
	    y += vy;
	    if (x + diameter/2 > width) {
	      x = width - diameter/2;
	      vx += -0.9; 
	    }
	    else if (x - diameter/2 < 0) {
	      x = diameter/2;
	      vx *= -0.9;
	    }
	    if (y + diameter/2 > height) {
	      y = height - diameter/2;
	      vy *= -0.9; 
	    } 
	    else if (y - diameter/2 < 0) {
	      y = diameter/2;
	      vy *= -0.9;
	    }
	 }
  }                                                         	
  
  void display() {
    fill(255, 204);
    ellipse(x, y, diameter, diameter);
  }
}